<script setup>
import { ref, onMounted, onUnmounted, watch } from 'vue'

const props = defineProps({
  levelId: {
    type: String,
    required: true
  },
  onComplete: {
    type: Function,
    default: () => {}
  }
})

const emit = defineEmits(['gameLoaded', 'taskCompleted', 'gameCompleted'])

const gameContainer = ref(null)
const gameInstance = ref(null)
const gameLoaded = ref(false)
const gameError = ref(null)

// Canvas-based game integration
onMounted(() => {
  initializeGameCanvas()
})

onUnmounted(() => {
  if (gameInstance.value) {
    // Clean up game resources
    disposeGame()
  }
})

// Watch for level changes to reload the game
watch(() => props.levelId, () => {
  if (gameLoaded.value) {
    disposeGame()
    initializeGameCanvas()
  }
})

// Initialize interactive game canvas
const initializeGameCanvas = () => {
  if (!gameContainer.value) return

  try {
    gameError.value = null

    console.log(`Initializing interactive canvas for level: ${props.levelId}`)

    // Create a canvas element for the game
    const canvas = document.createElement('canvas')
    canvas.width = gameContainer.value.clientWidth
    canvas.height = 400 // Fixed height for the game area
    canvas.style.display = 'block'
    canvas.style.backgroundColor = '#1f2937'
    canvas.classList.add('rounded-lg', 'shadow-lg') // Add rounded corners and shadow

    // Clear previous content
    gameContainer.value.innerHTML = ''
    gameContainer.value.appendChild(canvas)

      // Initialize a 2D context to draw on the canvas
      const ctx = canvas.getContext('2d')

      // Determine the game type based on level ID
      const levelCategory = determineLevelCategory(props.levelId)
      const gameType = determineGameType(props.levelId)

      // Store reference to the game instance with appropriate game type
      gameInstance.value = {
        canvas,
        ctx,
        animationFrame: null,
        startTime: Date.now(),
        levelId: props.levelId,
        levelCategory,
        gameType,
        progress: 0,
        interactionState: {
          buildingBlocks: [],
          characters: [],
          elements: [],
          score: 0,
          currentStep: 0,
          messages: [],
          completed: false
        }
      }

      // Initialize specific game type elements
      initializeGameElements(gameType, levelCategory)

      // Draw initial game scene
      drawGameElements(ctx, canvas.width, canvas.height)

      // Add event listeners for user interactions
      setupGameInteractions(canvas)

      // Start the game loop
      startGameLoop()

      // Mark game as loaded
      gameLoaded.value = true
      emit('gameLoaded')
  } catch (error) {
    console.error('Failed to initialize game:', error)
    gameError.value = error.message
  }
}

// Start the game loop
const startGameLoop = () => {
  if (!gameInstance.value) return

  const loop = () => {
    if (!gameInstance.value) return

    const { ctx, canvas } = gameInstance.value
    const elapsedTime = performance.now() - gameInstance.value.lastTimestamp

    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Update and draw game elements
    drawGameElements(ctx, canvas.width, canvas.height, elapsedTime)

    // Update the last timestamp
    gameInstance.value.lastTimestamp = performance.now()

    // Continue the loop
    gameInstance.value.animationFrame = requestAnimationFrame(loop)
  }

  // Start the loop
  gameInstance.value.animationFrame = requestAnimationFrame(loop)
}

// Determine the level category based on levelId
const determineLevelCategory = (levelId) => {
  const levelNum = parseInt(levelId.split('-')[1])
  if (levelNum >= 1 && levelNum <= 5) return 'html'
  if (levelNum >= 6 && levelNum <= 10) return 'css'
  if (levelNum >= 11 && levelNum <= 15) return 'javascript'
  return 'general'
}

// Determine the game type based on levelId
const determineGameType = (levelId) => {
  const levelNum = parseInt(levelId.split('-')[1])

  // Different game types based on level
  switch (levelNum) {
    case 1: return 'buildingBlocks'  // HTML structure - building a foundation
    case 2: return 'textFormatting'  // HTML formatting - styling a character
    case 3: return 'pathFinding'     // HTML links - creating paths between locations
    case 4: return 'treasureHunt'    // HTML images - finding and displaying treasures
    case 5: return 'organizePuzzle'  // HTML tables - organizing items in a grid
    case 6: return 'paintBrush'      // CSS basics - painting elements
    case 7: return 'targetShooter'   // CSS selectors - targeting specific elements
    case 8: return 'boxBuilder'      // CSS box model - building containers
    case 9: return 'colorMixer'      // CSS colors - mixing colors for effects
    case 10: return 'layoutBuilder'  // CSS flexbox - arranging items in space
    case 11: return 'variableCollector' // JS variables - collecting and storing values
    case 12: return 'logicGates'     // JS conditionals - routing through logic gates
    case 13: return 'functionFactory' // JS functions - assembly line production
    case 14: return 'arrayOrganizer' // JS arrays - organizing items in containers
    case 15: return 'domManipulator' // JS DOM - changing elements in a virtual world
    default: return 'general'
  }
}

// Initialize game elements based on game type
const initializeGameElements = (gameType, levelCategory) => {
  if (!gameInstance.value) return

  const { interactionState } = gameInstance.value

  // Reset state
  interactionState.buildingBlocks = []
  interactionState.dropTargets = []
  interactionState.character = {
    x: 320,
    y: 150,
    width: 60,
    height: 80,
    happiness: 0
  }
  interactionState.messages = []
  interactionState.completed = false

  // Initialize specific game elements based on type
  switch (gameType) {
    case 'buildingBlocks': {
      // Create building blocks for HTML structure
      interactionState.buildingBlocks = [
        { id: 'doctype', name: '<!DOCTYPE html>', placed: false, x: 50, y: 100, width: 120, height: 30 },
        { id: 'html', name: '<html>', placed: false, x: 50, y: 140, width: 60, height: 30 },
        { id: 'head', name: '<head>', placed: false, x: 50, y: 180, width: 60, height: 30 },
        { id: 'body', name: '<body>', placed: false, x: 50, y: 220, width: 60, height: 30 }
      ]
      interactionState.dropTargets = [
        { id: 'doctype', x: 200, y: 100, width: 120, height: 30, occupied: false },
        { id: 'html', x: 200, y: 140, width: 60, height: 30, occupied: false },
        { id: 'head', x: 200, y: 180, width: 60, height: 30, occupied: false },
        { id: 'body', x: 200, y: 220, width: 60, height: 30, occupied: false }
      ]
      interactionState.messages.push('Drag the HTML tags to build your page foundation!')
      break
    }

    case 'colorMixer': {
      const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33']
      const properties = ['color', 'background-color', 'border-color', 'text-shadow']
      interactionState.colors = colors
      interactionState.properties = properties
      interactionState.messages.push('Mix colors to create a unique effect!')
      break
    }

    case 'targetShooter': {
      const targetElements = ['#header', '.navigation', '#content', '.footer']
      interactionState.targets = targetElements.map((selector, index) => ({ id: index, selector, hit: false }))
      interactionState.messages.push('Target the elements to score points!')
      break
    }

    default:
      interactionState.messages.push('Complete the coding challenge to see your progress here!')
  }
}

// Setup interactive elements based on game type
const setupGameInteractions = (canvas) => {
  if (!gameInstance.value) return

  const gameType = gameInstance.value.gameType

  // Add event listeners based on game type
  canvas.addEventListener('click', (event) => handleCanvasClick(event, gameType))
  canvas.addEventListener('mousedown', (event) => handleMouseDown(event, gameType))
  canvas.addEventListener('mousemove', (event) => handleMouseMove(event, gameType))
  canvas.addEventListener('mouseup', () => handleMouseUp(gameType))
// Canvas event handlers
const handleCanvasClick = (event, gameType) => {
  if (!gameInstance.value) return

  // Convert click coordinates to canvas coordinates
  const canvas = event.target
  const rect = canvas.getBoundingClientRect()
  const x = event.clientX - rect.left
  const y = event.clientY - rect.top

  const { interactionState } = gameInstance.value

  // Handle interactions based on game type
  switch (gameType) {
    case 'buildingBlocks': {
      // Check if a building block was clicked
      const block = interactionState.buildingBlocks.find(b =>
        x >= b.x && x <= b.x + b.width && y >= b.y && y <= b.y + b.height
      )
      if (block && !block.placed) {
        // Logic for placing a building block
        block.placed = true
        updateGameProgress()
      }
      break
    }

    // Handle other game types
    default: {
      // Generic interaction
      interactionState.messages.push('Click detected - continue coding to see more interactions!')
      break
    }
  }
}

// Mouse down handler for drag operations
const handleMouseDown = (event, gameType) => {
  if (!gameInstance.value) return

  const canvas = event.target
  const rect = canvas.getBoundingClientRect()
  const x = event.clientX - rect.left
  const y = event.clientY - rect.top

  // Implement drag start logic based on game type
  if (gameType === 'buildingBlocks') {
    const block = gameInstance.value.interactionState.buildingBlocks.find(b =>
      !b.placed && x >= b.x && x <= b.x + b.width && y >= b.y && y <= b.y + b.height
    )

    if (block) {
      gameInstance.value.interactionState.activeBlock = block.id
    }
  }
}

// Mouse move handler for drag operations
const handleMouseMove = (event, gameType) => {
  if (!gameInstance.value || !gameInstance.value.interactionState.activeBlock) return

  const canvas = event.target
  const rect = canvas.getBoundingClientRect()
  const x = event.clientX - rect.left
  const y = event.clientY - rect.top

  // Move the active block
  const block = gameInstance.value.interactionState.buildingBlocks.find(
    b => b.id === gameInstance.value.interactionState.activeBlock
  )

  if (block) {
    block.x = x - block.width / 2
    block.y = y - block.height / 2
  }
}

// Mouse up handler for drag operations
const handleMouseUp = (gameType) => {
  if (!gameInstance.value || !gameInstance.value.interactionState.activeBlock) return

  // Check for drop on target
  const block = gameInstance.value.interactionState.buildingBlocks.find(
    b => b.id === gameInstance.value.interactionState.activeBlock
  )

  if (block && gameType === 'buildingBlocks') {
    const target = gameInstance.value.interactionState.dropTargets.find(t =>
      t.id === block.id &&
      block.x + (block.width / 2) >= t.x &&
      block.x + (block.width / 2) <= t.x + t.width &&
      block.y + (block.height / 2) >= t.y &&
      block.y + (block.height / 2) <= t.y + t.height
    )

    if (target) {
      // Snap to target
      block.x = target.x
      block.y = target.y
      block.placed = true
      target.occupied = true

      // Update progress
      updateGameProgress()
    }
  }

  // Clear active block
  gameInstance.value.interactionState.activeBlock = null
}

// Update game progress based on interactions
const updateGameProgress = () => {
  if (!gameInstance.value) return

  const { interactionState, gameType } = gameInstance.value

  // Calculate progress based on game type
  switch (gameType) {
    case 'buildingBlocks': {
      const placedBlocks = interactionState.buildingBlocks.filter(b => b.placed).length
      const totalBlocks = interactionState.buildingBlocks.length
      gameInstance.value.progress = totalBlocks > 0 ? (placedBlocks / totalBlocks) * 100 : 0

      // Check for completion
      if (placedBlocks === totalBlocks) {
        interactionState.completed = true
        interactionState.messages.push('Great job! You built the HTML foundation!')
        completeTask()
      }
      break
    }

    // Handle progress for other game types
    default: {
      // Generic progress
      gameInstance.value.progress += 10
      if (gameInstance.value.progress >= 100) {
        interactionState.completed = true
        completeTask()
      }
      break
    }
  }
}

// Draw game elements on the canvas based on game type
const drawGameElements = (ctx, width, height, elapsedTime = 0) => {
  if (!gameInstance.value) return

  const { gameType, interactionState, progress } = gameInstance.value

  // Background
  ctx.fillStyle = '#1f2937'
  ctx.fillRect(0, 0, width, height)

  // Draw grid lines
  ctx.strokeStyle = '#374151'
  for (let i = 0; i < width; i += 40) {
    ctx.beginPath()
    ctx.moveTo(i, 0)
    ctx.lineTo(i, height)
    ctx.stroke()
  }

  for (let i = 0; i < height; i += 40) {
    ctx.beginPath()
    ctx.moveTo(0, i)
    ctx.lineTo(width, i)
    ctx.stroke()
  }

  // Progress bar
  const progressWidth = (progress / 100) * width
  ctx.fillStyle = '#4C1D95'
  ctx.fillRect(0, 0, width, 5)
  ctx.fillStyle = '#8B5CF6'
  ctx.fillRect(0, 0, progressWidth, 5)

  // Draw elements based on game type
  switch (gameType) {
    case 'buildingBlocks': {
      // Building site for HTML structure
      ctx.fillStyle = '#6B7280'
      ctx.fillRect(200, 300, 200, 80)

      // Draw drop targets
      interactionState.dropTargets.forEach(target => {
        ctx.strokeStyle = target.occupied ? '#4ADE80' : '#6B7280'
        ctx.lineWidth = 2
        ctx.strokeRect(target.x, target.y, target.width, target.height)
      })

      // Draw building blocks
      interactionState.buildingBlocks.forEach(block => {
        ctx.fillStyle = block.placed ? '#4ADE80' : '#8B5CF6'
        ctx.fillRect(block.x, block.y, block.width, block.height)

        ctx.fillStyle = '#FFFFFF'
        ctx.font = '14px monospace'
        ctx.textAlign = 'center'
        ctx.fillText(block.name, block.x + block.width/2, block.y + block.height/2 + 5)
      })
      break
    }

    default: {
      // Draw a character that reacts to code progress
      const characterX = width / 2 + Math.sin(elapsedTime / 500) * 30
      const characterY = height / 2

      // Body color based on progress
      const progressHue = Math.floor(240 - (progress * 2.4)) // Blue to red based on progress
      ctx.fillStyle = `hsl(${progressHue}, 80%, 60%)`

      // Character body
      ctx.beginPath()
      ctx.arc(characterX, characterY, 30, 0, Math.PI * 2)
      ctx.fill()

      // Eyes
      ctx.fillStyle = '#FFFFFF'
      ctx.beginPath()
      ctx.arc(characterX - 10, characterY - 10, 5, 0, Math.PI * 2)
      ctx.arc(characterX + 10, characterY - 10, 5, 0, Math.PI * 2)
      ctx.fill()

      // Pupils
      ctx.fillStyle = '#000000'
      ctx.beginPath()
      ctx.arc(characterX - 10 + (progress / 50), characterY - 10, 2, 0, Math.PI * 2)
      ctx.arc(characterX + 10 + (progress / 50), characterY - 10, 2, 0, Math.PI * 2)
      ctx.fill()

      // Mouth - smile based on progress
      ctx.strokeStyle = '#ffffff'
      ctx.lineWidth = 2
      ctx.beginPath()
      const smileProgress = Math.PI - ((progress / 100) * Math.PI)
      ctx.arc(characterX, characterY + 5, 15, smileProgress, Math.PI * 2 - smileProgress)
      ctx.stroke()
      break
    }
  }

  // Draw message area at the bottom
  if (interactionState.messages.length > 0) {
    const latestMessage = interactionState.messages[interactionState.messages.length - 1]
    ctx.fillStyle = 'rgba(0,0,0,0.7)'
    ctx.fillRect(0, height - 40, width, 40)

    ctx.fillStyle = '#ffffff'
    ctx.font = '14px Arial'
    ctx.textAlign = 'center'
    ctx.fillText(latestMessage, width / 2, height - 15)
  }

  // Show completion message if completed
  if (interactionState.completed) {
    ctx.fillStyle = 'rgba(79, 70, 229, 0.9)' // Semi-transparent purple
    ctx.fillRect(width/2 - 150, height/2 - 50, 300, 100)

    ctx.fillStyle = '#ffffff'
    ctx.font = 'bold 20px Arial'
    ctx.fillText('Challenge Completed!', width/2, height/2 - 20)
    ctx.font = '16px Arial'
    ctx.fillText('Great job! Keep coding!', width/2, height/2 + 20)
  }
}

// Clean up game resources
const disposeGame = () => {
  if (gameInstance.value) {
    // Cancel animation frame
    if (gameInstance.value.animationFrame) {
      cancelAnimationFrame(gameInstance.value.animationFrame)
    }

    // Remove canvas
    if (gameInstance.value.canvas && gameInstance.value.canvas.parentNode) {
      gameInstance.value.canvas.parentNode.removeChild(gameInstance.value.canvas)
    }

    // Clear reference
    gameInstance.value = null
  }

  gameLoaded.value = false
}

// Methods to be called from parent component
const completeTask = () => {
  // This would trigger animations or other effects in the GDevelop game
  // For now, we'll just highlight this in the canvas
  if (gameInstance.value) {
    const { ctx, canvas } = gameInstance.value

    // Flash effect
    ctx.fillStyle = 'rgba(16, 185, 129, 0.3)' // Success color
    ctx.fillRect(0, 0, canvas.width, canvas.height)

    // Emit event
    emit('taskCompleted')
  }
}

const completeGame = () => {
  // Final game completion effect
  if (gameInstance.value) {
    const { ctx, canvas } = gameInstance.value

    // Clear the canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Success background
    ctx.fillStyle = '#10b981' // Success color
    ctx.fillRect(0, 0, canvas.width, canvas.height)

    // Congratulations text
    ctx.fillStyle = '#ffffff'
    ctx.font = 'bold 32px Arial'
    ctx.textAlign = 'center'
    ctx.textBaseline = 'middle'
    ctx.fillText('Level Completed!', canvas.width / 2, canvas.height / 2 - 20)

    ctx.font = '18px Arial'
    ctx.fillText('Great job! You\'ve mastered this challenge.', canvas.width / 2, canvas.height / 2 + 20)

    // Emit event
    emit('gameCompleted')

    // Call the completion callback
    props.onComplete()
  }
}


defineExpose({
  completeTask,
  completeGame
})
</script>

<template>
  <div class="game-engine">
    <div v-if="gameError" class="game-error">
      <p>{{ gameError }}</p>
    </div>
    <div
      ref="gameContainer"
      class="game-container bg-gray-800 overflow-hidden rounded-lg"
      :class="{ 'opacity-50': !gameLoaded }"
    >
      <div v-if="!gameLoaded" class="loading-indicator">
        <div class="spinner"></div>
        <p>Loading game engine...</p>
      </div>
    </div>
  </div>
</template>

<style scoped>
.game-engine {
  position: relative;
  height: 400px;
  margin-bottom: 1rem;
}

.game-container {
  width: 100%;
  height: 100%;
  transition: opacity 0.3s ease-in-out;
}

.loading-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  color: white;
}

.spinner {
  width: 40px;
  height: 40px;
  margin: 0 auto 10px;
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: #4f46e5;
  animation: spin 1s linear infinite;
}

.game-error {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #ef4444;
  background: rgba(0, 0, 0, 0.7);
  padding: 1rem;
  border-radius: 0.5rem;
  text-align: center;
  z-index: 10;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
</style>
